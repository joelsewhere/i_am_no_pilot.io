[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "content/spinners/index.html",
    "href": "content/spinners/index.html",
    "title": "spinners",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nijbol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "content/psalms/index.html",
    "href": "content/psalms/index.html",
    "title": "psalms",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "content/scribbles/index.html",
    "href": "content/scribbles/index.html",
    "title": "scribbles",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom requests import get\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "content/scribbles/olympic_games/index.html",
    "href": "content/scribbles/olympic_games/index.html",
    "title": "i am no pilot",
    "section": "",
    "text": "import json, copy\n# from requests import get\n# from bs4 import BeautifulSoup\n# import pandas as pd\n# from wikipedia_table_normalizer import normalize_wiki_table\n\n# root = 'https://en.wikipedia.org'\n# cities = '/wiki/List_of_Olympic_Games_host_cities'\n\n# html = get(root + cities).text\n# soup = BeautifulSoup(html)\n\n# city_table = soup.find_all('table')[1]\n# rows = city_table.find_all('tr')\n\n# header_row = rows[0]\n# column_names = [x.text for x in header_row.find_all('th')]\n\n# table_rows = rows[1:]\n\n# normalized_table = normalize_wiki_table(city_table)\n\n\n# status = {\n#     '†': 'Cancelled',\n#     '§': 'Postponed'\n# }\n\n# scrub = lambda x: x.replace('\\n', '').strip()\n\n# def from_roman(num):\n#     roman_numerals = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n#     result = 0\n#     for i,c in enumerate(num):\n#         if (i+1) == len(num) or roman_numerals[c] &gt;= roman_numerals[num[i+1]]:\n#             result += roman_numerals[c]\n#         else:\n#             result -= roman_numerals[c]\n#     return result\n\n# def find_game_number(row):\n\n#     number_tags =  [row[5], row[6]]\n#     for tag in number_tags:\n#         a = tag.find('a')\n#         if a:\n#             a.find('span').replaceWith('')\n\n#     return from_roman(scrub(max([x.text for x in number_tags])))\n\n# def get_location(city_url, cache):\n#     if city_url in cache:\n#         return cache[city_url]\n    \n#     city_html = get(city_url).text\n#     city_soup = BeautifulSoup(city_html)\n#     coordinates = city_soup.find('span', {'id': 'coordinates'})\n#     external_text = coordinates.find('a', {'class': 'external text'})\n#     geohack_url = external_text.attrs['href']\n#     geohack_html = get(geohack_url).text\n#     geohack_soup = BeautifulSoup(geohack_html)\n#     latitude = geohack_soup.find('span', {'class': 'latitude p-latitude'}).text\n#     longitude = geohack_soup.find('span', {'class': 'longitude p-longitude'}).text\n#     cache[city_url] = {'latitude': latitude, 'longitude': longitude}\n\n#     return cache[city_url]\n\n# def parse_date(date_td):\n#     date = scrub(date_td.find('span').text)\n#     if not date:\n#         return scrub(date_td.text)\n    \n#     else:\n#         day, month, year = date.split()\n#         return datetime.strptime(f\"{day.rjust(2, '0')}/{month}/{year}\", '%d/%B/%Y')\n\n\n# def get_temperature(row_data):\n#     if int(row_data['year']) &gt;= 1970 and row_data['status'] != 'Cancelled':\n#         date_format = '%Y-%m-%d'\n#         latitude = row_data['latitude']\n#         longitude = row_data['longitude']\n#         date1 = row_data['opening_ceremony'].strftime(date_format)\n#         date2 = row_data['closing_ceremony'].strftime(date_format)\n#         request = f'https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{latitude},{longitude}/{date1}/{date2}?unitGroup=us&key=7USMT7V3AG5HBFNTVFPSCFHW4&include=days&elements=temp'\n#         response = get(request)\n#         temp = response.json()['days']\n#         frame = pd.DataFrame(temp)\n#         return frame.temp.mean()\n#     else: \n#         return None\n        \n\n# scrubbed_table = []\n# location_cache = {}\n# for row in normalized_table:\n\n#     city_url = root + row[1].find('a').attrs['href']\n#     location = get_location(city_url, location_cache)\n\n#     row_data = dict(\n#         game_number = find_game_number(row),\n#         status = status.get(scrub(row[0].text), 'Completed'),\n#         city_name = scrub(row[1].find('a').text),\n#         city_url = root + row[1].find('a').attrs['href'],\n#         latitude = location['latitude'],\n#         longitude = location['longitude'],\n#         country_flag = 'https:' + row[2].find('img').attrs['src'],\n#         country_name = scrub(row[2].find('a').text),\n#         year = scrub(row[3].text),\n#         summer =  scrub(row[5].text) != '',\n#         winter = scrub(row[6].text) != '',  \n#         opening_ceremony = parse_date(row[7]),\n#         closing_ceremony = parse_date(row[8]),\n#         )\n\n#     # row_data['avg_temp'] = get_temperature(row_data)\n\n\n#     scrubbed_table.append(row_data)\n\n# df = pd.DataFrame(scrubbed_table)\n# df = df[df.year.astype(int) &lt;= 2024]\n\n# temperatures = pd.read_csv('temperatures.csv').set_index('slug_game')\n\n\n# medals = pd.read_csv('kaggle-data/olympic_medals.csv')\n# medals = medals.assign(year=medals.slug_game.str.split('-').apply(lambda x: x[-1]))\n\n\n# medals = pd.read_csv('kaggle-data/olympic_medals.csv')\n# medals = medals.assign(year=medals.slug_game.str.split('-').apply(lambda x: x[-1]))\n\n# df = df.assign(season=df.apply(lambda x: 'Summer' if x.summer else 'Winter', axis=1))\n# df = df.assign(slug_game_=df.city_name.str.lower().str.replace(' ', '-').str.replace('.', '').str.replace(\"'\", '-') + '-' + df.year,\n#                slug_game=lambda x: x.slug_game_.apply(lambda y: 'rio-2016' if y == 'rio-de-janeiro-2016' else y)\n#             ).drop('slug_game_', axis=1)\n# df = df.set_index('slug_game').join(temperatures).reset_index()\n\n# medals = df.set_index('slug_game').rename(columns={'country_name': 'host_country_name'}).join(medals.set_index('slug_game')[['discipline_title', 'event_gender', 'medal_type', 'participant_type', 'athlete_full_name', 'country_name', 'country_code']]).reset_index()\n\n\n# \"\"\"{   'temperature': {\n#                         winter: [],\n#                         summer: []}\n#     '2022': {\n#         'winter': {\n\n#         },\n#         'summer': {\n#             status:\n#             'location': {\n#                 'city_name':,\n#                 'country_name':,\n#                 'latitude':,\n#                 'longitude':,\n#                 'temperature':\n#                 'country_flag':\n#             }\n#             'countries': {\n#                 'United States of America': {\n#                     'total': 9,\n#                     'gold': 3,\n#                     'silver': 3,\n#                     'bronze': 3,\n#                     'weighted_total': 18,\n#                     'distribution: []\n#                     'disciplines': {\n#                             'discipline': {\n#                                 gold: \n#                                 silver:\n#                                 bronze:\n#                                 total:\n\n#                                 'athletea': 'medal count'\n#                             }\n#                         }\n#                     }\n\n#                 }\n#             }\n#         }\n#     }\n# }\"\"\"\n\n# df = df.sort_values(['year', 'opening_ceremony'])\n# temperature = {\n#     'winter': df.query('winter == True').avg_temp.to_list(),\n#     'summer': df.query('summer == True').avg_temp.to_list()\n# }\n\n\n# calculate_zscore = lambda x, column: (x[column] - x.groupby(['country_name', 'season'])[column].transform('mean')) / x.groupby(['country_name', 'season'])[column].transform('std')\n# country_game_summary = medals.groupby(['country_name', 'season', 'medal_type', 'slug_game']).count().iloc[:,0].to_frame('medals').reset_index().pivot(index=['country_name', 'slug_game', 'season'], columns='medal_type').fillna(0).droplevel(0, axis=1).assign(total=lambda x: x.sum(axis=1)).reset_index().assign(weighted_total=lambda x: (x.GOLD * 3 + x.SILVER * 2 + x.BRONZE)/x.total,\n#                     total_zscore=lambda x: calculate_zscore(x, 'total'),\n#                     weighted_zscore=lambda x: calculate_zscore(x, 'weighted_total')\n#                     )\n\n# distributions = country_game_summary.groupby(['country_name', 'season'])['total'].apply(list).to_frame('total_medals').reset_index().pivot(index='country_name', columns='season').droplevel(0, 1).to_dict(orient='index')\n\n# data_summary = {}\n# data_summary['temperature'] = temperature\n# for slug in df.slug_game:\n#     medals_frame = medals.query(f'slug_game == \"{slug}\"')\n#     loc_frame = df[df.slug_game == slug]\n#     country_summary = country_game_summary[country_game_summary.slug_game == slug]\n#     year = loc_frame.year.unique()[0]\n\n#     if year not in data_summary:\n#         data_summary[year] = {}\n\n#     season = loc_frame.season.iloc[0]\n#     data_summary[year][season] = {}\n\n#     location = loc_frame[['city_name', 'country_name', 'latitude', 'longitude', 'avg_temp', 'country_flag']].to_dict(orient='records')[0]\n\n#     status = loc_frame.status.iloc[0]\n\n#     data_summary[year][season]['status'] = status\n#     data_summary[year][season]['location'] = location\n\n#     if status != 'Completed':\n#         continue\n\n\n#     country_summaries = {}\n#     for country in medals_frame.country_name.unique():\n#         if pd.isna(country):\n#             continue\n#         c_frame = medals_frame[medals_frame.country_name == country]\n#         country_summary = c_frame.groupby(['discipline_title', 'medal_type']).slug_game.count().reset_index().rename(columns={'slug_game': 'medal_count'}).pivot(index='discipline_title', columns='medal_type').fillna(0).droplevel(0,1).assign(total=lambda x: x.sum(axis=1))\n#         country_summaries[country] = country_summary.to_dict(orient='index')\n#         medal_distribution = distributions[country]\n#         country_summaries[country]['medal_distribution'] = medal_distribution\n#         country_summaries[country]['flag'] = c_frame.country_flag.to_list()[0]\n#         relative_score = country_game_summary.query(f'country_name == \"{country}\" and slug_game == \"{slug}\"').reset_index(drop=True).iloc[:,4:].to_dict(orient='index')[0]\n#         country_summaries[country]['relative_scores'] = relative_score\n#         for discipline in c_frame.discipline_title.unique():\n#             d_frame = c_frame[c_frame.discipline_title == discipline]\n#             athlete_summary = d_frame.groupby(['athlete_full_name', 'medal_type']).slug_game.count().reset_index().rename(columns={'slug_game': 'medal_count'}).pivot(index='athlete_full_name', columns='medal_type').fillna(0).droplevel(0,1).reset_index().assign(total=lambda x: x.sum(axis=1))\n#             country_summaries[country][discipline]['athletes'] = athlete_summary.to_dict(orient='records')\n\n#     data_summary[year][season]['countries'] = country_summaries\n\nwith open('countries-110m.json', 'r') as file:\n    world = json.load(file)\n\n\nwith open('olympic_game_summaries.json', 'r') as file:\n    summary = json.load(file)\n\n# with open('olympic_game_summaries.json', 'w') as file:\n#     json.dump(data_summary, file)\n\n\nojs_define(\n    summaries = summary,\n    # world = world,\n )\n\n\n\n\n\nworld = d3.json('https://ironanalytics-storage.s3.amazonaws.com/olympics-blog/countries-110m.json')\ncountries = topojson.feature(world, world.objects.countries).features.sort((a,b) =&gt; a.properties.name.localeCompare(b.properties.name))\nborders = topojson.mesh(world, world.objects.countries, (a, b) =&gt; a !== b)\nland = topojson.feature(world, world.objects.land)\n\ngraticule = d3.geoGraticule10()\n\nw = 450\nr = w / 2 - 2\n\nclass Versor {\n  static fromAngles([l, p, g]) {\n    l *= Math.PI / 360;\n    p *= Math.PI / 360;\n    g *= Math.PI / 360;\n    const sl = Math.sin(l), cl = Math.cos(l);\n    const sp = Math.sin(p), cp = Math.cos(p);\n    const sg = Math.sin(g), cg = Math.cos(g);\n    return [\n      cl * cp * cg + sl * sp * sg,\n      sl * cp * cg - cl * sp * sg,\n      cl * sp * cg + sl * cp * sg,\n      cl * cp * sg - sl * sp * cg\n    ];\n  }\n  static toAngles([a, b, c, d]) {\n    return [\n      Math.atan2(2 * (a * b + c * d), 1 - 2 * (b * b + c * c)) * 180 / Math.PI,\n      Math.asin(Math.max(-1, Math.min(1, 2 * (a * c - d * b)))) * 180 / Math.PI,\n      Math.atan2(2 * (a * d + b * c), 1 - 2 * (c * c + d * d)) * 180 / Math.PI\n    ];\n  }\n  static interpolateAngles(a, b) {\n    const i = Versor.interpolate(Versor.fromAngles(a), Versor.fromAngles(b));\n    return t =&gt; Versor.toAngles(i(t));\n  }\n  static interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    a2 -= a1, b2 -= b1, c2 -= c1, d2 -= d1;\n    const x = new Array(4);\n    return t =&gt; {\n      const l = Math.hypot(x[0] = a1 + a2 * t, x[1] = b1 + b2 * t, x[2] = c1 + c2 * t, x[3] = d1 + d2 * t);\n      x[0] /= l, x[1] /= l, x[2] /= l, x[3] /= l;\n      return x;\n    };\n  }\n  static interpolate([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    let dot = a1 * a2 + b1 * b2 + c1 * c2 + d1 * d2;\n    if (dot &lt; 0) a2 = -a2, b2 = -b2, c2 = -c2, d2 = -d2, dot = -dot;\n    if (dot &gt; 0.9995) return Versor.interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]); \n    const theta0 = Math.acos(Math.max(-1, Math.min(1, dot)));\n    const x = new Array(4);\n    const l = Math.hypot(a2 -= a1 * dot, b2 -= b1 * dot, c2 -= c1 * dot, d2 -= d1 * dot);\n    a2 /= l, b2 /= l, c2 /= l, d2 /= l;\n    return t =&gt; {\n      const theta = theta0 * t;\n      const s = Math.sin(theta);\n      const c = Math.cos(theta);\n      x[0] = a1 * c + a2 * s;\n      x[1] = b1 * c + b2 * s;\n      x[2] = c1 * c + c2 * s;\n      x[3] = d1 * c + d2 * s;\n      return x;\n    };\n  }\n}\n\n\n{\n  var no_selection = true\n  var p1 = 0,\n      p2 = [0,0],\n      r1 = 0,\n      r2 = [0,0, 0],\n      rotation_speed = 200,\n      rotation = [performance.now() / rotation_speed, 0, 0],\n      tilt = 20,\n      country = undefined;\n  const container = d3.select(html```\n  &lt;div id=\"container\"&gt;\n    &lt;svg id=\"years\"&gt;&lt;/svg&gt;\n    &lt;div id=\"canvas\"&gt;&lt;/div&gt;\n&lt;/div&gt;```)\n  const selection = container.select('#years')\n\nfunction render(country, arc) {\n    context.clearRect(0, 0, w, w);\n    context.beginPath(), projection.precision(0.2), path(graticule), context.globalAlpha = 0.1, context.stroke();\n    context.beginPath(), path(land), context.fillStyle = \"#ccc\", context.globalAlpha = 1, context.fill();\n    context.beginPath(), path(country), context.fillStyle = \"#f00\", context.fill();\n    context.beginPath(), path(borders), context.strokeStyle = \"#fff\", context.lineWidth = 0.5, context.stroke();\n    context.beginPath(), path({type: \"Sphere\"}), context.strokeStyle = \"#000\", context.lineWidth = 1.5, context.stroke();\n    context.beginPath(), path(arc), context.stroke();\n    return context.canvas;\n  }\n\n    selection\n    .attr(\"width\",\"510px\")\n    .attr(\"height\",\"510px\");\n\n    const years = Object.keys(summary)\n    years.shift()\n    \n\n  selection.selectAll('option')\n           .data(countries)\n           .join('option')\n          .attr('value', (d,i) =&gt; i)\n          .text(d =&gt; d.properties.name);\n\n  selection.insert('option', \":first-child\").attr('selected', 'true').attr('disabled', 'disabled').text('Select a country');\n\n  selection.on('change', function(event) {\n  \n        country = countries[event.target.value];\n        \n        if (no_selection == true) {\n\n            \n           rotation_speed = .5\n          \n           setTimeout(() =&gt; {\n             no_selection = false;\n\n          p1 = p2, p2 = d3.geoCentroid(country);\n          \n          \n          r1 = r2, r2 = [-p2[0], tilt - p2[1], 0];\n          const ip = d3.geoInterpolate(p1, p2);\n          \n          const iv = Versor.interpolateAngles(r1, r2);\n          render(country)\n        \n\n          d3.transition()\n            .duration(0)\n            .tween(\"render\", () =&gt; t =&gt; {\n              projection.rotate(iv(t));\n              render(country, {type: \"LineString\", coordinates: [p1, ip(t)]});\n            })\n          .transition()\n            .tween(\"render\", () =&gt; t =&gt; {\n\n              render(country, {type: \"LineString\", coordinates: [ip(t), p2]});\n            })\n          .end();\n           }, 300);\n    } else {\n          \n      p1 = p2, p2 = d3.geoCentroid(country);\n      r1 = r2, r2 = [-p2[0], tilt - p2[1], 0];\n      const ip = d3.geoInterpolate(p1, p2);\n      const iv = Versor.interpolateAngles(r1, r2);\n\n     d3.transition()\n        .duration(1250)\n        .tween(\"render\", () =&gt; t =&gt; {\n         projection.rotate(iv(t));\n          render(country, {type: \"LineString\", coordinates: [p1, ip(t)]});\n        })\n      .transition()\n        .tween(\"render\", () =&gt; t =&gt; {\n          render(country, {type: \"LineString\", coordinates: [ip(t), p2]});\n        })\n      .end();}\n\n                        \n    \n});\n  \n  const context = DOM.context2d(w, w);\n  context.canvas.style.display = \"block\";\n  context.canvas.style.margin = \"auto\";\n  const projection = d3.geoOrthographic().scale(r).translate([w / 2, w / 2]);\n  const path = d3.geoPath(projection, context);\n  context.lineWidth = 1.5;\n  while (no_selection) {\n    rotation = [performance.now() / rotation_speed, 0, 0];\n    projection.rotate(rotation);\n    context.clearRect(0, 0, w, w);\n    context.beginPath(), projection.precision(0.2), path(graticule), context.globalAlpha = 0.1, context.stroke();\n    context.beginPath(), path(land), context.fillStyle = \"#ccc\", context.globalAlpha = 1, context.fill();\n    context.beginPath(), path(borders), context.strokeStyle = \"#fff\", context.lineWidth = 0.5, context.stroke();\n    context.beginPath(), path({type: \"Sphere\"}), context.strokeStyle = \"#000\", context.lineWidth = 1.5, context.stroke();\n    // context.beginPath(), context.arc(w / 2, w / 2, r, 0, 2 * Math.PI), context.stroke();\n     \n    // context.beginPath(), projection.precision(0), path(land), context.globalAlpha = 1, context.fill();\n    container.select('#canvas').html('')\n    container.select('#canvas').node().append(context.canvas)\n    yield container.node()\n\n  }\n\n  \n}"
  },
  {
    "objectID": "content/stories/index.html",
    "href": "content/stories/index.html",
    "title": "stories",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "content/spinners/ijbol/index.html",
    "href": "content/spinners/ijbol/index.html",
    "title": "ijbol",
    "section": "",
    "text": "What doesijbolmean??\n\n\n\n\n\n\n\n\n{\n\n\n\nfunction choose(chooses) {\n  var index = Math.floor(Math.random() * chooses.length);\n  return chooses[index];\n}\n\n\nconst div = html`\n\n    &lt;center&gt;&lt;div id=\"app\"&gt;\n    &lt;span&gt;-------&gt; &lt;button id=\"button\" style=\"background-color:#e95420; color:white;\" type=\"button\"&gt;???????&lt;/button&gt; &lt;-------&lt;/span&gt;\n    &lt;h2 id=\"ijbol\"&gt;&lt;/h2&gt;\n    &lt;/div&gt;&lt;/center&gt;\n`\n\nconst container = d3.select(div);\nconst button = container.select('#button');\nconst text = container.select('#ijbol');\nconst color = d3.scaleOrdinal(d3.schemeDark2);\n\nbutton.on('click', () =&gt; {\n\n\n    var sentence = 'i'\n\n    const j = choose(['verbs', 'adverbs'])\n\n    console.log(sentence, j)\n\n    if (j == 'verbs') {\n\n        var b = 'conjunctions'\n        var o = 'adverbs'\n        var l = 'adverbs'\n        console.log(b, o, l)\n    } else {\n\n        var b = 'verbs'\n        var o = choose(['adjectives', 'nouns'])\n        var l = 'nouns'\n        console.log(b, o, l)\n    }\n\n    sentence += ` ${choose(options['j'][j])}`\n    sentence += ` ${choose(options['b'][b])}`\n    sentence += ` ${choose(options['o'][o])}`\n\n    if (o == 'nouns') {\n        sentence += \"'s\"\n    }\n    \n    sentence += ` ${choose(options['l'][l])}`\n\n    console.log(sentence)\n\n    text.html('')\n\n    text.selectAll(null)\n        .data(sentence.split(' '))\n        .enter()\n        .append('span')\n        .text(d =&gt; `${d} `)\n        .style('color', d =&gt; color(d))\n\n}\n)\n\nreturn container.node()\n}"
  },
  {
    "objectID": "index.html#nonsense",
    "href": "index.html#nonsense",
    "title": "i am no pilot",
    "section": "Nonsense",
    "text": "Nonsense\n\n\n  \n    \n      \n      \n        \n          \n            \n                stories\n            \n            \n        \n      \n      \n      \n        \n          \n            \n                scribbles\n            \n            \n        \n      \n      \n      \n        \n          \n            \n                psalms\n            \n            \n        \n      \n      \n      \n        \n          \n            \n                spinners\n            \n            \n        \n      \n      \n    \n  \n\n\nNo matching items"
  }
]